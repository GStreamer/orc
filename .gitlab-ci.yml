stages:
 - build

variables:
  MESON_ARGS: --werror --fatal-meson-warnings

debian sid:
  image: 'debian:sid'
  stage: build
  variables:
    DEPENDENCIES: >
      meson
      ninja-build
      build-essential
  before_script:
    - apt-get update
    - apt-get install --yes ${DEPENDENCIES}
  script:
    - meson setup $MESON_ARGS build/
    - meson compile --verbose -C build/
    - meson test -C build/
    - meson test -C build/ --benchmark
    - meson install -C build/
  artifacts:
    paths:
      - build/meson-logs/

.build windows:
  image: 'registry.freedesktop.org/gstreamer/gstreamer/amd64/windows:2022-01-26.3-main'
  stage: 'build'
  tags:
    - 'docker'
    - 'windows'
    - '1809'
    - 'gstreamer-windows'
  variables:
    # Make sure any failure in PowerShell scripts is fatal
    ErrorActionPreference: 'Stop'
    WarningPreference: 'Stop'
    MESON_ARGS: ' '
  before_script:
    # Make sure meson is up to date, so we don't need to rebuild the image with each release
    - pip3 install -U meson ninja
  script:
    # For some reason, options are separated by newline instead of space, so we
    # have to replace them first.
    - $env:MESON_ARGS = $env:MESON_ARGS.replace("`n"," ")
    # Gitlab executes PowerShell in docker, but VsDevCmd.bat is a batch script.
    # Environment variables substitutions is done by PowerShell before calling
    # cmd.exe, that's why we use $env:FOO instead of %FOO%
    - cmd.exe /C "C:\BuildTools\Common7\Tools\VsDevCmd.bat -host_arch=amd64 -arch=$env:ARCH -app_platform=$env:PLAT &&
        meson setup build $env:MESON_ARGS &&
        meson compile --verbose -C build &&
        meson test -C build &&
        meson test -C build --benchmark"

vs2019 amd64:
  extends: '.build windows'
  variables:
    ARCH: 'amd64'
    PLAT: 'Desktop'

vs2019 x86:
  extends: '.build windows'
  variables:
    ARCH: 'x86'
    PLAT: 'Desktop'

vs2019 arm64 UWP:
  extends: '.build windows'
  variables:
    ARCH: 'arm64'
    PLAT: 'UWP'
    MESON_ARGS: >
      --cross-file ci/vs2019-arm64-uwp-cross-file.txt
      --native-file ci/vs2019-x64-native-file.txt

vs2019 arm UWP:
  extends: '.build windows'
  # Known to not work, but maybe we'll want it later
  when: 'manual'
  allow_failure: true
  variables:
    ARCH: 'arm'
    PLAT: 'UWP'
    MESON_ARGS: >
      --cross-file ci/vs2019-arm-uwp-cross-file.txt
      --native-file ci/vs2019-x64-native-file.txt

msys2:
  extends: '.build windows'
  when: 'manual'
  allow_failure: true
  script:
    # XXX: Copied from https://gitlab.freedesktop.org/gstreamer/gst-ci/blob/master/gitlab/ci_template.yml#L487
    - $env:PATH += ";C:\msys64\usr\bin;C:\msys64\mingw64\bin;C:\msys64\mingw32\bin"
    - C:\msys64\usr\bin\bash -c "pacman-key --init && pacman-key --populate msys2 && pacman-key --refresh-keys || true"
    - C:\msys64\usr\bin\bash -c "sed -i 's/^CheckSpace/#CheckSpace/g' /etc/pacman.conf"
    - echo "Updating MSYS2"
    - C:\msys64\usr\bin\bash -c "pacman -Syuu --noconfirm || echo Update failed, ignoring"
    - echo "Killing all MSYS2 processes"
    - taskkill /F /FI "MODULES eq msys-2.0.dll"
    - echo "Completing MSYS2 update"
    - C:\msys64\usr\bin\bash -c "pacman -Suu --noconfirm"
    - echo "Installing needed MSYS2 packages"
    - C:\msys64\usr\bin\bash -c "pacman -Sy --noconfirm --needed mingw-w64-x86_64-toolchain ninja"
    - C:\msys64\usr\bin\bash -c "meson setup build $env:MESON_ARGS &&
        meson compile --verbose -C build &&
        meson test -C build &&
        meson test -C build --benchmark"

macos x86_64:
  stage: 'build'
  tags:
    - gst-macos-11.1
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_SHA}"
    expire_in: '5 days'
    when: 'always'
    paths:
      - "build/meson-logs/*txt"
  before_script:
    - pip3 install --upgrade pip
    # Need to install certificates for python
    - pip3 install --upgrade certifi
    # Anther way to install certificates
    - open /Applications/Python\ 3.8/Install\ Certificates.command
    # Make sure meson and ninja are up to date
    - pip3 install -U meson ninja
  script:
    - CERT_PATH=$(python3 -m certifi) && export SSL_CERT_FILE=${CERT_PATH} && export REQUESTS_CA_BUNDLE=${CERT_PATH}
    - meson setup --werror build
    - meson compile --verbose -C build
    - meson test -C build
    - meson test -C build --benchmark

ios arm64:
  stage: 'build'
  tags:
    - gst-ios-14.3
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_SHA}"
    expire_in: '5 days'
    when: 'always'
    paths:
      - "build/meson-logs/*txt"
  before_script:
    - pip3 install --upgrade pip
    # Need to install certificates for python
    - pip3 install --upgrade certifi
    # Anther way to install certificates
    - open /Applications/Python\ 3.8/Install\ Certificates.command
    # Make sure meson and ninja are up to date
    - pip3 install -U meson ninja
  script:
    - CERT_PATH=$(python3 -m certifi) && export SSL_CERT_FILE=${CERT_PATH} && export REQUESTS_CA_BUNDLE=${CERT_PATH}
    - |
      cat > ios-cross-file.txt <<EOF
      [host_machine]
      system = 'darwin'
      cpu_family = 'aarch64'
      cpu = 'aarch64'
      endian = 'little'

      [properties]
      c_args      = ['-arch', 'arm64', '--sysroot=$(xcrun --sdk iphoneos --show-sdk-path)', '-miphoneos-version-min=8.0']
      c_link_args = ['-arch', 'arm64', '--sysroot=$(xcrun --sdk iphoneos --show-sdk-path)', '-miphoneos-version-min=8.0']

      [binaries]
      ar        = '$(xcrun --find --sdk iphoneos ar)'
      c         = '$(xcrun --find --sdk iphoneos clang)'
      cpp       = '$(xcrun --find --sdk iphoneos clang++)'
      ranlib    = '$(xcrun --find --sdk iphoneos ranlib)'
      strip     = '$(xcrun --find --sdk iphoneos strip)'
      pkgconfig = 'false'
      EOF
    - meson setup --werror -Dorc-test=disabled -Db_bitcode=true --cross-file ios-cross-file.txt build
    - meson compile --verbose -C build

android fedora arm64:
  image: 'registry.freedesktop.org/gstreamer/gst-ci/amd64/android-fedora:2020-06-25.0-master'
  stage: 'build'
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_SHA}"
    expire_in: '5 days'
    when: 'always'
    paths:
      - "build/meson-logs/*.txt"
  before_script:
    - dnf install -y python3-pip gcc ninja-build
    - pip3 install --user meson
  script:
    - export PATH="$HOME/.local/bin:$PATH"
    - |
      cat > android-cross-file.txt <<EOF
      [constants]
      ndk_path    = '/android/ndk'
      toolchain   = ndk_path + '/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android'
      api         = '28'

      [host_machine]
      system      = 'android'
      cpu_family  = 'aarch64'
      cpu         = 'aarch64'
      endian      = 'little'

      [properties]
      sys_root        = ndk_path + '/sysroot'
      c_link_args     = ['-fuse-ld=gold']
      cpp_link_args   = ['-fuse-ld=gold']

      [binaries]
      c           = toolchain + api + '-clang'
      cpp         = toolchain + api + '-clang++'
      ar          = toolchain + '-ar'
      strip       = toolchain + '-strip'
      EOF
    - meson setup --werror --cross-file android-cross-file.txt build
    - meson compile --verbose -C build
