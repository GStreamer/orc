<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % version-entities SYSTEM "version.entities">
%version-entities;
<!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="orc-running" revision="20 jan 2024">
<refmeta>
<refentrytitle>Running Orc Applications</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>Orc</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Running Orc Applications</refname>
<refpurpose>
How to run applications using ORC.
</refpurpose>
</refnamediv>

<refsect1>
<title>Running Orc Applications</title>

<para>
At runtime several environment variables can be used to control ORC.
</para>

<formalpara id="ORC_DEBUG">
  <title><envar>ORC_DEBUG</envar></title>

  <para>
    This environment variable can be set to a number indicating the level for
    debug logging. A value of 0 (default) results in no debug logging. The
    higher the value to more detail is logged.
  </para>
</formalpara>

<formalpara id="ORC_CODE">
  <title><envar>ORC_CODE</envar></title>

  <para>
    This variable can be set to a comma separated list of flags to control the
    code selection and execution. Supported values are: backup, emulate and
    debug. The value 'backup' would instruct ORC to select the C based backup
    functions. Selecting 'emulate' will run the ORC code through an interpreter.
    Using 'debug' enables debuggers such as gdb to create useful backtraces from
    ORC-generated code
  </para>
</formalpara>

<formalpara id="ORC_TARGET">
  <title><envar>ORC_TARGET</envar></title>

  <para>
    This environment variable can be used to override the default target
    selection and force a specific target such as "sse" or "avx".
    This can be useful for benchmarking purposes, e.g. to compare SSE vs. AVX
    targets, or to work around bugs. Available since Orc 0.4.35.
  </para>
</formalpara>

</refsect1>

</refentry>
